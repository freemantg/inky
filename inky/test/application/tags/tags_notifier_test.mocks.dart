// Mocks generated by Mockito 5.4.1 from annotations
// in inky/test/application/tags/tags_notifier_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:inky/application/tags/tags_notifier.dart' as _i3;
import 'package:inky/domain/tags/tag.dart' as _i7;
import 'package:inky/domain/tags/tag_failure.dart' as _i6;
import 'package:inky/infrastructure/infrastructure.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod/riverpod.dart' as _i8;
import 'package:state_notifier/state_notifier.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTagsState_1 extends _i1.SmartFake implements _i3.TagsState {
  _FakeTagsState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TagRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagRepository extends _i1.Mock implements _i4.TagRepository {
  MockTagRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.TagFailure, _i2.Unit>> create(_i7.Tag? tag) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [tag],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.TagFailure, _i2.Unit>>.value(
            _FakeEither_0<_i6.TagFailure, _i2.Unit>(
          this,
          Invocation.method(
            #create,
            [tag],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.TagFailure, _i2.Unit>>);
  @override
  _i5.Future<_i2.Either<_i6.TagFailure, _i2.Unit>> delete(_i7.Tag? tag) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [tag],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.TagFailure, _i2.Unit>>.value(
            _FakeEither_0<_i6.TagFailure, _i2.Unit>(
          this,
          Invocation.method(
            #delete,
            [tag],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.TagFailure, _i2.Unit>>);
  @override
  _i5.Stream<_i2.Either<_i6.TagFailure, List<_i7.Tag>>> streamTags(
          List<_i7.Tag>? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamTags,
          [filter],
        ),
        returnValue:
            _i5.Stream<_i2.Either<_i6.TagFailure, List<_i7.Tag>>>.empty(),
      ) as _i5.Stream<_i2.Either<_i6.TagFailure, List<_i7.Tag>>>);
}

/// A class which mocks [TagsNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagsNotifier extends _i1.Mock implements _i3.TagsNotifier {
  MockTagsNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i8.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  _i5.Stream<_i3.TagsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.TagsState>.empty(),
      ) as _i5.Stream<_i3.TagsState>);
  @override
  _i3.TagsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTagsState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.TagsState);
  @override
  set state(_i3.TagsState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.TagsState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeTagsState_1(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i3.TagsState);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void initialiseTags({List<_i7.Tag>? filter}) => super.noSuchMethod(
        Invocation.method(
          #initialiseTags,
          [],
          {#filter: filter},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void streamTags() => super.noSuchMethod(
        Invocation.method(
          #streamTags,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> createTag(String? name) => (super.noSuchMethod(
        Invocation.method(
          #createTag,
          [name],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteTag(_i7.Tag? tag) => (super.noSuchMethod(
        Invocation.method(
          #deleteTag,
          [tag],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void addFilterTag(_i7.Tag? tag) => super.noSuchMethod(
        Invocation.method(
          #addFilterTag,
          [tag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeFilterTag(_i7.Tag? tag) => super.noSuchMethod(
        Invocation.method(
          #removeFilterTag,
          [tag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool updateShouldNotify(
    _i3.TagsState? old,
    _i3.TagsState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i8.RemoveListener addListener(
    _i9.Listener<_i3.TagsState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i8.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
