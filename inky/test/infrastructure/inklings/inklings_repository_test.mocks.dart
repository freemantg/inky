// Mocks generated by Mockito 5.4.1 from annotations
// in inky/test/infrastructure/inklings/inklings_repository_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:inky/domain/metadata/meta_data_failure.dart' as _i9;
import 'package:inky/infrastructure/inklings/inkling_dto.dart' as _i5;
import 'package:inky/infrastructure/inklings/inklings_local_service.dart'
    as _i3;
import 'package:inky/infrastructure/inklings/inklings_remote_service.dart'
    as _i8;
import 'package:inky/infrastructure/inklings/meta_data.dart' as _i10;
import 'package:inky/infrastructure/tags/tag_dto.dart' as _i6;
import 'package:inky/router.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InklingLocalServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockInklingLocalServices extends _i1.Mock
    implements _i3.InklingLocalServices {
  MockInklingLocalServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i5.InklingDto>> streamInklings({
    List<_i6.TagDto>? filter,
    _i7.InklingType? inklingType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamInklings,
          [],
          {
            #filter: filter,
            #inklingType: inklingType,
          },
        ),
        returnValue: _i4.Stream<List<_i5.InklingDto>>.empty(),
      ) as _i4.Stream<List<_i5.InklingDto>>);
  @override
  _i4.Future<void> upsert(_i5.InklingDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #upsert,
          [dto],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> delete(_i5.InklingDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [dto],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [InklingRemoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockInklingRemoteService extends _i1.Mock
    implements _i8.InklingRemoteService {
  MockInklingRemoteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i9.MetaDataFailure, _i10.MetaData>> fetchMetaData(
          String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMetaData,
          [url],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i9.MetaDataFailure, _i10.MetaData>>.value(
                _FakeEither_0<_i9.MetaDataFailure, _i10.MetaData>(
          this,
          Invocation.method(
            #fetchMetaData,
            [url],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i9.MetaDataFailure, _i10.MetaData>>);
}
